/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a multi-tenant security model where users have ownership over their data and can be granted specific roles within properties.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 * - /user_permissions/{userId}: Stores user permissions, accessible only to the user themselves.
 * - /properties/{propertyId}: Stores property information, with access controlled via a 'members' map on the document.
 * - /properties/{propertyId}/locations/{locationId}: Stores locations within a property. Access is controlled by the 'members' map on the parent property document.
 * - /properties/{propertyId}/items/{itemId}: Stores items within a property. Access is controlled by the 'members' map on the parent property document.
 * - /properties/{propertyId}/items/{itemId}/item_locations/{itemLocationId}: Stores item locations. Access is controlled by the 'members' map on the grandparent property document.
 * - /properties/{propertyId}/tags/{tagId}: Stores tags within a property. Access is controlled by the 'members' map on the parent property document.
 * - /properties/{propertyId}/items/{itemId}/item_tags/{itemTagId}: Stores item tags. Access is controlled by the 'members' map on the grandparent property document.
 * - /properties/{propertyId}/items/{itemId}/photos/{photoId}: Stores photos associated with items. Access is controlled by the 'members' map on the grandparent property document.
 * - /properties/{propertyId}/locations/{locationId}/photos/{photoId}: Stores photos associated with locations. Access is controlled by the 'members' map on the grandparent property document.
 * - /properties/{propertyId}/barcodes/{barcodeId}: Stores barcodes within a property. Access is controlled by the 'members' map on the parent property document.
 * - /properties/{propertyId}/items/{itemId}/move_logs/{moveLogId}: Stores move logs. Access is controlled by the 'members' map on the grandparent property document.
 *
 * Key Security Decisions:
 * - Strict user-ownership for /users/{userId} and /user_permissions/{userId}.
 * - Access to properties and their subcollections is managed through a 'members' map on the property document, enabling role-based access control.
 * - No user listing is allowed for the /users collection.
 *
 * Denormalization for Authorization:
 * - The 'members' map within the /properties/{propertyId} document denormalizes user roles, eliminating the need for costly 'get()' calls to a separate PropertyMember collection. This map should contain user IDs as keys and their roles (e.g., 'owner', 'editor', 'viewer') as values.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if the authenticated user's ID matches the userId.
     *  Example: User with UID 'user123' can read, create, update, or delete the document at /users/user123.
     * @deny (get, create, update, delete) if the authenticated user's ID does not match the userId.
     *  Example: User with UID 'user456' cannot read, create, update, or delete the document at /users/user123.
     * @principle Enforces user-ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to user permissions. Only the authenticated user can read or write their own permissions.
     * @path /user_permissions/{userId}
     * @allow (get, create, update, delete) if the authenticated user's ID matches the userId.
     *  Example: User with UID 'user123' can read, create, update, or delete the document at /user_permissions/user123.
     * @deny (get, create, update, delete) if the authenticated user's ID does not match the userId.
     *  Example: User with UID 'user456' cannot read, create, update, or delete the document at /user_permissions/user123.
     * @principle Enforces user-ownership for user permissions.
     */
    match /user_permissions/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to properties. Access is determined by the 'members' map on the property document.
     * @path /properties/{propertyId}
     * @allow (get, list) if the authenticated user is a member of the property.
     *  Example: User with UID 'user123' can read the property if 'user123' exists as a key in the 'members' map.
     * @allow (create) if the user is creating and is setting up the members map with their id with role owner
     *  Example: User with UID 'user123' can create property and their id exists as a key in the 'members' map.
     * @allow (update, delete) if the authenticated user is the owner of the property.
     *  Example: User with UID 'user123' can update or delete the property if resource.data.members.user123 == 'owner'.
     * @deny (create, update, delete) if the authenticated user is not a member of the property or not the owner.
     *  Example: User with UID 'user456' cannot update or delete the property if resource.data.members.user456 != 'owner'.
     * @principle Enforces role-based access control for properties using the 'members' map.
     */
    match /properties/{propertyId} {
      allow get, list: if isMember(propertyId);
      allow create: if request.auth != null && request.resource.data.members[request.auth.uid] == 'owner';
      allow update: if isExistingOwner(propertyId);
      allow delete: if isExistingOwner(propertyId);
    }

    /**
     * @description Controls access to locations within a property. Access is determined by membership in the parent property.
     * @path /properties/{propertyId}/locations/{locationId}
     * @allow (get, list) if the authenticated user is a member of the property.
     *  Example: User with UID 'user123' can read a location if they are a member of the property containing the location.
     * @allow (create, update, delete) if the authenticated user is a member of the property with 'editor' or 'owner' role.
     *  Example: User with UID 'user123' can create, update, or delete a location if resource.data.members.user123 == 'editor' or resource.data.members.user123 == 'owner'.
     * @deny (create, update, delete) if the authenticated user is not a member of the property or does not have sufficient permissions.
     *  Example: User with UID 'user456' cannot update or delete a location if they are not a member of the property or their role is 'viewer'.
     * @principle Enforces role-based access control for locations based on property membership.
     */
    match /properties/{propertyId}/locations/{locationId} {
      allow get, list: if isMember(propertyId);
      allow create, update, delete: if isEditorOrOwner(propertyId);
    }

    /**
     * @description Controls access to items within a property. Access is determined by membership in the parent property.
     * @path /properties/{propertyId}/items/{itemId}
     * @allow (get, list) if the authenticated user is a member of the property.
     *  Example: User with UID 'user123' can read an item if they are a member of the property containing the item.
     * @allow (create, update, delete) if the authenticated user is a member of the property with 'editor' or 'owner' role.
     *  Example: User with UID 'user123' can create, update, or delete an item if resource.data.members.user123 == 'editor' or resource.data.members.user123 == 'owner'.
     * @deny (create, update, delete) if the authenticated user is not a member of the property or does not have sufficient permissions.
     *  Example: User with UID 'user456' cannot update or delete an item if they are not a member of the property or their role is 'viewer'.
     * @principle Enforces role-based access control for items based on property membership.
     */
    match /properties/{propertyId}/items/{itemId} {
      allow get, list: if isMember(propertyId);
      allow create, update, delete: if isEditorOrOwner(propertyId);
    }

    /**
     * @description Controls access to item locations within a property and item. Access is determined by membership in the parent property.
     * @path /properties/{propertyId}/items/{itemId}/item_locations/{itemLocationId}
     * @allow (get, list) if the authenticated user is a member of the property.
     *  Example: User with UID 'user123' can read an item location if they are a member of the property containing the item location.
     * @allow (create, update, delete) if the authenticated user is a member of the property with 'editor' or 'owner' role.
     *  Example: User with UID 'user123' can create, update, or delete an item location if resource.data.members.user123 == 'editor' or resource.data.members.user123 == 'owner'.
     * @deny (create, update, delete) if the authenticated user is not a member of the property or does not have sufficient permissions.
     *  Example: User with UID 'user456' cannot update or delete an item location if they are not a member of the property or their role is 'viewer'.
     * @principle Enforces role-based access control for item locations based on property membership.
     */
    match /properties/{propertyId}/items/{itemId}/item_locations/{itemLocationId} {
      allow get, list: if isMember(propertyId);
      allow create, update, delete: if isEditorOrOwner(propertyId);
    }

    /**
     * @description Controls access to tags within a property. Access is determined by membership in the parent property.
     * @path /properties/{propertyId}/tags/{tagId}
     * @allow (get, list) if the authenticated user is a member of the property.
     *  Example: User with UID 'user123' can read a tag if they are a member of the property containing the tag.
     * @allow (create, update, delete) if the authenticated user is a member of the property with 'editor' or 'owner' role.
     *  Example: User with UID 'user123' can create, update, or delete a tag if resource.data.members.user123 == 'editor' or resource.data.members.user123 == 'owner'.
     * @deny (create, update, delete) if the authenticated user is not a member of the property or does not have sufficient permissions.
     *  Example: User with UID 'user456' cannot update or delete a tag if they are not a member of the property or their role is 'viewer'.
     * @principle Enforces role-based access control for tags based on property membership.
     */
    match /properties/{propertyId}/tags/{tagId} {
      allow get, list: if isMember(propertyId);
      allow create, update, delete: if isEditorOrOwner(propertyId);
    }

    /**
     * @description Controls access to item tags within a property and item. Access is determined by membership in the parent property.
     * @path /properties/{propertyId}/items/{itemId}/item_tags/{itemTagId}
     * @allow (get, list) if the authenticated user is a member of the property.
     *  Example: User with UID 'user123' can read an item tag if they are a member of the property containing the item tag.
     * @allow (create, update, delete) if the authenticated user is a member of the property with 'editor' or 'owner' role.
     *  Example: User with UID 'user123' can create, update, or delete an item tag if resource.data.members.user123 == 'editor' or resource.data.members.user123 == 'owner'.
     * @deny (create, update, delete) if the authenticated user is not a member of the property or does not have sufficient permissions.
     *  Example: User with UID 'user456' cannot update or delete an item tag if they are not a member of the property or their role is 'viewer'.
     * @principle Enforces role-based access control for item tags based on property membership.
     */
    match /properties/{propertyId}/items/{itemId}/item_tags/{itemTagId} {
      allow get, list: if isMember(propertyId);
      allow create, update, delete: if isEditorOrOwner(propertyId);
    }

    /**
     * @description Controls access to photos associated with items within a property and item. Access is determined by membership in the parent property.
     * @path /properties/{propertyId}/items/{itemId}/photos/{photoId}
     * @allow (get, list) if the authenticated user is a member of the property.
     *  Example: User with UID 'user123' can read a photo if they are a member of the property containing the photo.
     * @allow (create, update, delete) if the authenticated user is a member of the property with 'editor' or 'owner' role.
     *  Example: User with UID 'user123' can create, update, or delete a photo if resource.data.members.user123 == 'editor' or resource.data.members.user123 == 'owner'.
     * @deny (create, update, delete) if the authenticated user is not a member of the property or does not have sufficient permissions.
     *  Example: User with UID 'user456' cannot update or delete a photo if they are not a member of the property or their role is 'viewer'.
     * @principle Enforces role-based access control for photos based on property membership.
     */
    match /properties/{propertyId}/items/{itemId}/photos/{photoId} {
      allow get, list: if isMember(propertyId);
      allow create, update, delete: if isEditorOrOwner(propertyId);
    }

    /**
     * @description Controls access to photos associated with locations within a property and location. Access is determined by membership in the parent property.
     * @path /properties/{propertyId}/locations/{locationId}/photos/{photoId}
     * @allow (get, list) if the authenticated user is a member of the property.
     *  Example: User with UID 'user123' can read a photo if they are a member of the property containing the photo.
     * @allow (create, update, delete) if the authenticated user is a member of the property with 'editor' or 'owner' role.
     *  Example: User with UID 'user123' can create, update, or delete a photo if resource.data.members.user123 == 'editor' or resource.data.members.user123 == 'owner'.
     * @deny (create, update, delete) if the authenticated user is not a member of the property or does not have sufficient permissions.
     *  Example: User with UID 'user456' cannot update or delete a photo if they are not a member of the property or their role is 'viewer'.
     * @principle Enforces role-based access control for photos based on property membership.
     */
    match /properties/{propertyId}/locations/{locationId}/photos/{photoId} {
      allow get, list: if isMember(propertyId);
      allow create, update, delete: if isEditorOrOwner(propertyId);
    }

    /**
     * @description Controls access to barcodes within a property. Access is determined by membership in the parent property.
     * @path /properties/{propertyId}/barcodes/{barcodeId}
     * @allow (get, list) if the authenticated user is a member of the property.
     *  Example: User with UID 'user123' can read a barcode if they are a member of the property containing the barcode.
     * @allow (create, update, delete) if the authenticated user is a member of the property with 'editor' or 'owner' role.
     *  Example: User with UID 'user123' can create, update, or delete a barcode if resource.data.members.user123 == 'editor' or resource.data.members.user123 == 'owner'.
     * @deny (create, update, delete) if the authenticated user is not a member of the property or does not have sufficient permissions.
     *  Example: User with UID 'user456' cannot update or delete a barcode if they are not a member of the property or their role is 'viewer'.
     * @principle Enforces role-based access control for barcodes based on property membership.
     */
    match /properties/{propertyId}/barcodes/{barcodeId} {
      allow get, list: if isMember(propertyId);
      allow create, update, delete: if isEditorOrOwner(propertyId);
    }

    /**
     * @description Controls access to move logs for items within a property and item. Access is determined by membership in the parent property.
     * @path /properties/{propertyId}/items/{itemId}/move_logs/{moveLogId}
     * @allow (get, list) if the authenticated user is a member of the property.
     *  Example: User with UID 'user123' can read a move log if they are a member of the property containing the move log.
     * @allow (create, update, delete) if the authenticated user is a member of the property with 'editor' or 'owner' role.
     *  Example: User with UID 'user123' can create, update, or delete a move log if resource.data.members.user123 == 'editor' or resource.data.members.user123 == 'owner'.
     * @deny (create, update, delete) if the authenticated user is not a member of the property or does not have sufficient permissions.
     *  Example: User with UID 'user456' cannot update or delete a move log if they are not a member of the property or their role is 'viewer'.
     * @principle Enforces role-based access control for move logs based on property membership.
     */
    match /properties/{propertyId}/items/{itemId}/move_logs/{moveLogId} {
      allow get, list: if isMember(propertyId);
      allow create, update, delete: if isEditorOrOwner(propertyId);
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the given userId.
     * @param userId The user ID to compare against.
     * @return True if the user is signed in and their UID matches the userId, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is a member of the property.
     * @param propertyId The ID of the property to check.
     * @return True if the user is in the 'members' map of the property document, false otherwise.
     */
    function isMember(propertyId) {
      return isSignedIn() && get(/databases/$(database)/documents/properties/$(propertyId)).data.members[request.auth.uid] != null;
    }

    /**
     * @description Checks if the authenticated user is an editor or owner of the property.
     * @param propertyId The ID of the property to check.
     * @return True if the user is in the 'members' map of the property document with role 'editor' or 'owner', false otherwise.
     */
    function isEditorOrOwner(propertyId) {
      return isSignedIn() && (get(/databases/$(database)/documents/properties/$(propertyId)).data.members[request.auth.uid] == 'editor' || get(/databases/$(database)/documents/properties/$(propertyId)).data.members[request.auth.uid] == 'owner');
    }

        /**
     * @description Checks if the authenticated user is the owner of the property and the document exists.
     * @param propertyId The ID of the property to check.
     * @return True if the user is in the 'members' map of the property document with role 'owner' and resource exists, false otherwise.
     */
    function isExistingOwner(propertyId) {
      return isSignedIn()
          && get(/databases/$(database)/documents/properties/$(propertyId)).data.members[request.auth.uid] == 'owner'
          && resource != null;
    }
  }
}